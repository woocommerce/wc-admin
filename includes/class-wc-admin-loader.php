<?php
/**
 * Register the scripts, styles, and includes needed for pieces of the WooCommerce Admin experience.
 * NOTE: DO NOT edit this file in WooCommerce core, this is generated from woocommerce-admin.
 *
 * @package Woocommerce Admin
 */

/**
 * WC_Admin_Loader Class.
 */
class WC_Admin_Loader {

	/**
	 * Class instance.
	 *
	 * @var WC_Admin_Loader instance
	 */
	protected static $instance = null;

	/**
	 * An array of classes to load from the includes folder.
	 *
	 * @var array
	 */
	protected static $classes = array();

	/**
	 * Get class instance.
	 */
	public static function get_instance() {
		if ( ! self::$instance ) {
			self::$instance = new self();
		}
		return self::$instance;
	}

	/**
	 * Constructor.
	 */
	public function __construct() {
		add_action( 'admin_init', array( 'WC_Admin_Loader', 'load_features' ) );
		add_action( 'admin_enqueue_scripts', array( 'WC_Admin_Loader', 'register_scripts' ) );
		add_action( 'admin_enqueue_scripts', array( 'WC_Admin_Loader', 'load_scripts' ), 15 );
		add_action( 'woocommerce_components_settings', array( 'WC_Admin_Loader', 'add_component_settings' ) );
		add_filter( 'admin_body_class', array( 'WC_Admin_Loader', 'add_admin_body_classes' ) );
		add_action( 'admin_menu', array( 'WC_Admin_Loader', 'register_page_handler' ) );
		add_filter( 'admin_title', array( 'WC_Admin_Loader', 'update_admin_title' ) );

		// @todo move these to notes code.
		add_action( 'admin_head', array( 'WC_Admin_Loader', 'remove_notices' ) );
		add_action( 'admin_notices', array( 'WC_Admin_Loader', 'inject_before_notices' ), 0 );
		add_action( 'admin_notices', array( 'WC_Admin_Loader', 'inject_after_notices' ), PHP_INT_MAX );
	}

	/**
	 * Gets an array of enabled WooCommerce Admin features/sections.
	 *
	 * @return bool Enabled Woocommerce Admin features/sections.
	 */
	public static function get_features() {
		return apply_filters( 'woocommerce_admin_features', array() );
	}

	/**
	 * Returns if a specific wc-admin feature is enabled.
	 *
	 * @param  string $feature Feature slug.
	 * @return bool Returns true if the feature is enabled.
	 */
	public static function is_feature_enabled( $feature ) {
		$features = self::get_features();
		return in_array( $feature, $features );
	}

	/**
	 * Gets the URL to an asset file.
	 *
	 * @param  string $file name.
	 * @return string URL to asset.
	 */
	public static function get_url( $file ) {
		return plugins_url( self::get_path( $file ) . $file, WC_ADMIN_PLUGIN_FILE );
	}

	/**
	 * Gets the file modified time as a cache buster if we're in dev mode, or the plugin version otherwise.
	 *
	 * @param string $file Local path to the file.
	 * @return string The cache buster value to use for the given file.
	 */
	public static function get_file_version( $file ) {
		if ( defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG ) {
			$file = trim( $file, '/' );
			return filemtime( WC_ADMIN_ABSPATH . self::get_path( $file ) );
		}
		return WC_ADMIN_VERSION_NUMBER;
	}

	/**
	 * Gets the path for the asset depending on file type.
	 *
	 * @param  string $file name.
	 * @return string Folder path of asset.
	 */
	private static function get_path( $file ) {
		return '.css' === substr( $file, -4 ) ? WC_ADMIN_DIST_CSS_FOLDER : WC_ADMIN_DIST_JS_FOLDER;
	}

	/**
	 * Class loader for enabled WooCommerce Admin features/sections.
	 */
	public static function load_features() {
		$features = self::get_features();
		foreach ( $features as $feature ) {
			$feature = strtolower( $feature );
			$file    = WC_ADMIN_ABSPATH . '/includes/' . $feature . '/class-wc-admin-' . $feature . '.php';
			if ( file_exists( $file ) ) {
				require_once( $file );
				$feature = ucfirst( $feature );
				self::$classes[] = 'WC_Admin_' . $feature;
			}
		}
	}

	/**
	 * Registers a basic page handler for the app entry point.
	 *
	 * @todo The entry point for the embed needs moved to this class as well.
	 */
	public static function register_page_handler() {
		add_submenu_page(
			'woocommerce',
			null,
			null,
			'manage_options',
			'wc-admin',
			array( 'WC_Admin_Loader', 'page_wrapper' )
		);
	}

	/**
	 * Registers all the neccessary scripts and styles to show the admin experience.
	 */
	public static function register_scripts() {
		wp_register_script(
			'wc-csv',
			self::get_url( 'csv-export/index.js' ),
			array(),
			self::get_file_version( 'csv-export/index.js' ),
			true
		);

		wp_register_script(
			'wc-currency',
			self::get_url( 'currency/index.js' ),
			array( 'wc-number' ),
			self::get_file_version( 'currency/index.js' ),
			true
		);

		wp_register_script(
			'wc-navigation',
			self::get_url( 'navigation/index.js' ),
			array(),
			self::get_file_version( 'navigation/index.js' ),
			true
		);

		wp_register_script(
			'wc-number',
			self::get_url( 'number/index.js' ),
			array(),
			self::get_file_version( 'number/index.js' ),
			true
		);

		wp_register_script(
			'wc-date',
			self::get_url( 'date/index.js' ),
			array( 'wp-date', 'wp-i18n' ),
			self::get_file_version( 'date/index.js' ),
			true
		);

		wp_register_script(
			'wc-components',
			self::get_url( 'components/index.js' ),
			array(
				'wp-components',
				'wp-data',
				'wp-element',
				'wp-hooks',
				'wp-i18n',
				'wp-keycodes',
				'wc-csv',
				'wc-currency',
				'wc-date',
				'wc-navigation',
				'wc-number',
			),
			self::get_file_version( 'components/index.js' ),
			true
		);

		wp_register_style(
			'wc-components',
			self::get_url( 'components/style.css' ),
			array( 'wp-edit-blocks' ),
			self::get_file_version( 'components/style.css' )
		);
		wp_style_add_data( 'wc-components', 'rtl', 'replace' );

		wp_register_style(
			'wc-components-ie',
			self::get_url( 'components/ie.css' ),
			array( 'wp-edit-blocks' ),
			self::get_file_version( 'components/ie.css' )
		);
		wp_style_add_data( 'wc-components-ie', 'rtl', 'replace' );

		$entry = 'app';
		if ( self::is_embed_page() ) {
			$entry = 'embedded';
		}

		wp_register_script(
			WC_ADMIN_APP,
			self::get_url( "{$entry}/index.js" ),
			array( 'wc-components', 'wc-navigation', 'wp-date', 'wp-html-entities', 'wp-keycodes', 'wp-i18n' ),
			self::get_file_version( "{$entry}/index.js" ),
			true
		);

		if ( function_exists( 'wp_set_script_translations' ) ) {
			wp_set_script_translations( WC_ADMIN_APP, 'woocommerce-admin' );
		}

		wp_register_style(
			WC_ADMIN_APP,
			self::get_url( "{$entry}/style.css" ),
			array( 'wc-components' ),
			self::get_file_version( "{$entry}/style.css" )
		);
		wp_style_add_data( WC_ADMIN_APP, 'rtl', 'replace' );
	}

	/**
	 * Loads the required scripts on the correct pages.
	 */
	public static function load_scripts() {
		if ( ! self::is_admin_page() && ! self::is_embed_page() ) {
			return;
		}

		wp_enqueue_script( WC_ADMIN_APP );
		wp_enqueue_style( WC_ADMIN_APP );

		// Use server-side detection to prevent unneccessary stylesheet loading in other browsers.
		$user_agent = isset( $_SERVER['HTTP_USER_AGENT'] ) ? $_SERVER['HTTP_USER_AGENT'] : ''; // WPCS: sanitization ok.
		preg_match( '/MSIE (.*?);/', $user_agent, $matches );
		if ( count( $matches ) < 2 ) {
			preg_match( '/Trident\/\d{1,2}.\d{1,2}; rv:([0-9]*)/', $user_agent, $matches );
		}
		if ( count( $matches ) > 1 ) {
			wp_enqueue_style( 'wc-components-ie' );
		}

	}

	/**
	 * Returns true if we are on a JS powered admin page.
	 */
	public static function is_admin_page() {
		global $hook_suffix;
		if ( in_array( $hook_suffix, array( 'woocommerce_page_wc-admin' ) ) ) {
			return true;
		}
		return false;
	}

	/**
	 *  Returns true if we are on a "classic" (non JS app) powered admin page.
	 *
	 * @todo See usage in `admin.php`. This needs refactored and implemented properly in core.
	 */
	public static function is_embed_page() {
		return apply_filters( 'woocommerce_page_is_embed_page', false );
	}

	/**
	 * Adds body classes to the main wp-admin wrapper, allowing us to better target elements in specific scenarios.
	 *
	 * @param string $admin_body_class Body class to add.
	 */
	public static function add_admin_body_classes( $admin_body_class = '' ) {
		global $hook_suffix;

		if ( ! self::is_admin_page() && ! self::is_embed_page() ) {
			return $admin_body_class;
		}

		$classes   = explode( ' ', trim( $admin_body_class ) );
		$classes[] = 'woocommerce-page';
		if ( self::is_embed_page() ) {
			$classes[] = 'woocommerce-embed-page';
		}

		$features = self::get_features();
		foreach ( $features as $feature_key ) {
			$classes[] = sanitize_html_class( 'woocommerce-feature-enabled-' . $feature_key );
		}

		$admin_body_class = implode( ' ', array_unique( $classes ) );
		return " $admin_body_class ";
	}

	/**
	 * Removes notices that should not be displayed on WC Admin pages.
	 *
	 * @todo move to activity panel code?
	 */
	public static function remove_notices() {
		if ( ! self::is_admin_page() && ! self::is_embed_page() ) {
			return;
		}

		// Hello Dolly.
		if ( function_exists( 'hello_dolly' ) ) {
			remove_action( 'admin_notices', 'hello_dolly' );
		}
	}

	/**
	 * Runs before admin notices action and hides them.
	 *
	 * @todo move to activity panel code?
	 */
	public static function inject_before_notices() {
		if ( ( ! self::is_admin_page() && ! self::is_embed_page() ) || ! self::is_feature_enabled( 'activity-panels' ) ) {
			return;
		}
		echo '<div class="woocommerce-layout__notice-list-hide" id="wp__notice-list">';
		echo '<div class="wp-header-end" id="woocommerce-layout__notice-catcher"></div>'; // https://github.com/WordPress/WordPress/blob/f6a37e7d39e2534d05b9e542045174498edfe536/wp-admin/js/common.js#L737.
	}

	/**
	 * Runs after admin notices and closes div.
	 *
	 * @todo move to activity panel code?
	 */
	public static function inject_after_notices() {
		if ( ( ! self::is_admin_page() && ! self::is_embed_page() ) || ! self::is_feature_enabled( 'activity-panels' ) ) {
			return;
		}
		echo '</div>';
	}

	/**
	 * Edits Admin title based on section of wc-admin.
	 *
	 * @param string $admin_title Modifies admin title.
	 * @todo Can we do some URL rewriting so we can figure out which page they are on server side?
	 */
	public static function update_admin_title( $admin_title ) {
		if ( ! self::is_admin_page() && ! self::is_embed_page() ) {
			return $admin_title;
		}

		if ( self::is_embed_page() ) {
			$sections = wc_admin_get_embed_breadcrumbs(); // @todo Bring this function into loader.
			$sections = is_array( $sections ) ? $sections : array( $sections );
			$pieces   = array();

			foreach ( $sections as $section ) {
				$pieces[] = is_array( $section ) ? $section[1] : $section;
			}

			$pieces = array_reverse( $pieces );
			$title  = implode( ' &lsaquo; ', $pieces );
		} else {
			$title = __( 'Dashboard', 'woocommerce-admin' );
		}
		/* translators: %1$s: updated title, %2$s: blog info name */
		return sprintf( __( '%1$s &lsaquo; %2$s &#8212; WooCommerce', 'woocommerce-admin' ), $title, get_bloginfo( 'name' ) );
	}

	/**
	 * Set up a div for the app to render into.
	 */
	public static function page_wrapper() {
		?>
		<div class="wrap">
			<div id="root"></div>
		</div>
		<?php
	}

	/**
	 * Hooks extra neccessary data into the component settings array already set in WooCommerce core.
	 *
	 * @param array $settings Array of component settings.
	 * @return array Array of component settings.
	 */
	public static function add_component_settings( $settings ) {
		// @todo Some of these component settings should be added by feature specific code.
		$preload_data_endpoints = array(
			'countries'             => '/wc/v4/data/countries',
			'performanceIndicators' => '/wc/v4/reports/performance-indicators/allowed',
		);

		if ( function_exists( 'gutenberg_preload_api_request' ) ) {
			$preload_function = 'gutenberg_preload_api_request';
		} else {
			$preload_function = 'rest_preload_api_request';
		}

		$preload_data = array_reduce(
			array_values( $preload_data_endpoints ),
			$preload_function
		);

		$current_user_data = array();
		foreach ( self::get_user_data_fields() as $user_field ) {
			$current_user_data[ $user_field ] = json_decode( get_user_meta( get_current_user_id(), 'wc_admin_' . $user_field, true ) );
		}

		$settings['alertCount']       = WC_Admin_Notes::get_notes_count( array( 'error', 'update' ), array( 'unactioned' ) );
		$settings['orderStatuses']    = self::get_order_statuses( wc_get_order_statuses() );
		$settings['currentUserData']  = $current_user_data;
		$settings                     = self::get_custom_settings( $settings );
		foreach ( $preload_data_endpoints as $key => $endpoint ) {
			$settings['dataEndpoints'][ $key ] = $preload_data[ $endpoint ]['body'];
		}
		$settings['currency']          = self::get_currency_settings();
		$settings['reviewsEnabled']    = get_option( 'woocommerce_enable_reviews' );
		$settings['manageStock']       = get_option( 'woocommerce_manage_stock' );
		$settings['commentModeration'] = get_option( 'comment_moderation' );

		if ( self::is_embed_page() ) {
			$settings['embedBreadcrumbs'] = wc_admin_get_embed_breadcrumbs(); // @todo move function into loader.
		}

		return $settings;
	}

	/**
	 * Format order statuses by removing a leading 'wc-' if present.
	 *
	 * @param array $statuses Order statuses.
	 * @return array formatted statuses.
	 */
	public static function get_order_statuses( $statuses ) {
		$formatted_statuses = array();
		foreach ( $statuses as $key => $value ) {
			$formatted_key                        = preg_replace( '/^wc-/', '', $key );
			$formatted_statuses[ $formatted_key ] = $value;
		}
		return $formatted_statuses;
	}

	/**
	 * Gets custom settings used for WC Admin.
	 *
	 * @param array $settings Array of settings to merge into.
	 * @return array
	 */
	public static function get_custom_settings( $settings ) {
		$wc_rest_settings_options_controller = new WC_REST_Setting_Options_Controller();
		$wc_admin_group_settings             = $wc_rest_settings_options_controller->get_group_settings( 'wc_admin' );
		$settings['wcAdminSettings']         = array();

		foreach ( $wc_admin_group_settings as $setting ) {
			$settings['wcAdminSettings'][ $setting['id'] ] = $setting['value'];
		}
		return $settings;
	}

	/**
	 * Return an object defining the currecy options for the site's current currency
	 *
	 * @return  array  Settings for the current currency {
	 *     Array of settings.
	 *
	 *     @type string $code       Currency code.
	 *     @type string $precision  Number of decimals.
	 *     @type string $symbol     Symbol for currency.
	 * }
	 */
	public static function get_currency_settings() {
		$code = get_woocommerce_currency();

		return apply_filters(
			'wc_currency_settings',
			array(
				'code'               => $code,
				'precision'          => wc_get_price_decimals(),
				'symbol'             => html_entity_decode( get_woocommerce_currency_symbol( $code ) ),
				'position'           => get_option( 'woocommerce_currency_pos' ),
				'decimal_separator'  => wc_get_price_decimal_separator(),
				'thousand_separator' => wc_get_price_thousand_separator(),
				'price_format'       => html_entity_decode( get_woocommerce_price_format() ),
			)
		);
	}

	/**
	 * We store some WooCommerce specific user meta attached to users endpoint,
	 * so that we can track certain preferences or values such as the inbox activity panel last open time.
	 * Additional fields can be added in the function below, and then used via wc-admin's currentUser data.
	 *
	 * @return array Fields to expose over the WP user endpoint.
	 */
	public static function get_user_data_fields() {
		$user_data_fields = array(
			'categories_report_columns',
			'coupons_report_columns',
			'customers_report_columns',
			'orders_report_columns',
			'products_report_columns',
			'revenue_report_columns',
			'taxes_report_columns',
			'variations_report_columns',
			'dashboard_performance_indicators',
			'dashboard_charts',
			'dashboard_chart_type',
			'dashboard_chart_interval',
			'dashboard_leaderboards',
			'dashboard_leaderboard_rows',
			'activity_panel_inbox_last_read',
			'activity_panel_reviews_last_read',
		);

		return apply_filters( 'wc_admin_get_user_data_fields', $user_data_fields );
	}
}

new WC_Admin_Loader();
